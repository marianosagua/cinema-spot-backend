generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar(50)
  movies movies[]
}

model movies {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  poster      String
  category    Int?
  categories  categories? @relation(fields: [category], references: [id], onUpdate: NoAction, map: "fk_category")
  showtimes   showtimes[]
}

model reservations {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  showtime_id String    @db.Uuid
  seat_id     String    @db.Uuid
  seats       seats     @relation(fields: [seat_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_seat")
  showtimes   showtimes @relation(fields: [showtime_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_showtime")
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
}

model roles {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(50)
  description String  @db.VarChar(255)
  users       users[]
}

model rooms {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  seats     seats[]
  showtimes showtimes[]
}

model seats {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  seat_number  Int
  room         String?        @db.Uuid
  is_available Boolean        @default(true)
  reservations reservations[]
  rooms        rooms?         @relation(fields: [room], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model showtimes {
  id           String         @id(map: "functions_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movie        Int?
  start_time   DateTime       @db.Timestamp(6)
  end_time     DateTime       @db.Timestamp(6)
  room         String         @db.Uuid
  is_full      Boolean        @default(false)
  reservations reservations[]
  movies       movies?        @relation(fields: [movie], references: [id], onUpdate: NoAction, map: "fk_movie")
  rooms        rooms          @relation(fields: [room], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name      String         @db.VarChar(100)
  last_name       String         @db.VarChar(100)
  email           String         @unique @db.VarChar(100)
  password        String         @unique @db.VarChar(255)
  role            Int            @default(2)
  created_at      DateTime?      @default(now()) @db.Timestamp(6)
  updated_at      DateTime?      @default(now()) @db.Timestamp(6)
  email_validated Boolean        @default(false)
  reservations    reservations[]
  roles           roles          @relation(fields: [role], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
