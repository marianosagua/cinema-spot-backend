generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar(50)
  movies movies[]
}

model functions {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  movie_id          Int?
  start_time        DateTime       @db.Timestamp(6)
  end_time          DateTime       @db.Timestamp(6)
  hall              Int
  reservationscount Int?           @default(20)
  movies            movies?        @relation(fields: [movie_id], references: [id], onUpdate: NoAction, map: "fk_movie")
  reservations      reservations[]
}

model halls {
  hall_number     Int @id
  available_seats Int @default(20)
}

model movies {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  poster      String
  category_id Int?
  functions   functions[]
  categories  categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_category")
}

model reservations {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id           String?    @db.Uuid
  function_id       String?    @db.Uuid
  state_reservation Boolean?   @default(true)
  functions         functions? @relation(fields: [function_id], references: [id], onUpdate: NoAction, map: "fk_function")
}

model users {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String   @unique @db.VarChar(100)
  password        String   @unique @db.VarChar(100)
  name            String   @db.VarChar(100)
  email_validated Boolean?
  role_id         Int?     @default(2)
  roles           roles?   @relation(fields: [role_id], references: [id], onUpdate: NoAction, map: "fk_user")
}

model roles {
  id          Int     @id @default(autoincrement())
  role_name   String  @unique
  description String?
  users       users[]
}
